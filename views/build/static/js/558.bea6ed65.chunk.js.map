{"version":3,"file":"static/js/558.bea6ed65.chunk.js","mappings":"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","sources":["pages/Auth/Signup.tsx","util/validators.ts"],"sourcesContent":["import { useState, SyntheticEvent } from \"react\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\n\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Link,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    createTheme,\n    ThemeProvider,\n} from \"@mui/material\";\n\nimport { required, length, email } from \"../../util/validators\";\nimport { useNavigate, Link as RouterLink } from \"react-router-dom\";\n\nconst defaultTheme = createTheme({\n    palette: {\n        mode: \"dark\",\n    },\n});\n\ninterface FormField {\n    value: string;\n    valid: boolean;\n    touched: boolean;\n    validators: ((value: string) => boolean)[];\n}\n\ninterface SignUpForm {\n    email: FormField;\n    password: FormField;\n    name: FormField;\n    formIsValid: boolean;\n}\n\ninterface SignUpProps {\n    onSignup: (\n        event: SyntheticEvent,\n        data: {\n            signupForm: {\n                email: { value: string };\n                password: { value: string };\n                name: { value: string };\n            };\n        }\n    ) => void;\n}\n\nexport default function SignUp({ onSignup }: SignUpProps) {\n    const navigate = useNavigate();\n\n    const [signupForm, setSignupForm] = useState<SignUpForm>({\n        email: {\n            value: \"\",\n            valid: false,\n            touched: false,\n            validators: [required, email],\n        },\n        password: {\n            value: \"\",\n            valid: false,\n            touched: false,\n            validators: [required, length({ min: 5 })],\n        },\n        name: {\n            value: \"\",\n            valid: false,\n            touched: false,\n            validators: [required],\n        },\n        formIsValid: false,\n    });\n\n    const inputChangeHandler = (input: keyof SignUpForm, value: string) => {\n        let isValid = true;\n        for (const validator of signupForm[\n            input as \"email\" | \"password\" | \"name\"\n        ].validators) {\n            isValid = isValid && validator(value);\n        }\n        const updatedForm = {\n            ...signupForm,\n            [input]: {\n                ...signupForm[input as \"email\" | \"password\" | \"name\"],\n                valid: isValid,\n                value: value,\n            },\n        };\n        let formIsValid = true;\n        for (const inputName in updatedForm) {\n            if (inputName !== \"formIsValid\") {\n                formIsValid =\n                    formIsValid &&\n                    updatedForm[inputName as \"email\" | \"password\" | \"name\"]\n                        .valid;\n            }\n        }\n        setSignupForm({ ...updatedForm, formIsValid: formIsValid });\n    };\n\n    const inputBlurHandler = (input: keyof SignUpForm) => {\n        setSignupForm((prevState) => {\n            return {\n                ...prevState,\n                [input]: {\n                    ...prevState[input as \"email\" | \"password\" | \"name\"],\n                    touched: true,\n                },\n            };\n        });\n    };\n\n    const handleSubmit = (event: SyntheticEvent) => {\n        event.preventDefault();\n        onSignup(event, {\n            signupForm: {\n                email: { value: signupForm.email.value },\n                password: { value: signupForm.password.value },\n                name: { value: signupForm.name.value },\n            },\n        });\n        navigate(\"/\");\n    };\n\n    return (\n        <ThemeProvider theme={defaultTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        noValidate\n                        onSubmit={handleSubmit}\n                        sx={{ mt: 3 }}\n                    >\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    autoComplete=\"name\"\n                                    name=\"name\"\n                                    required\n                                    fullWidth\n                                    id=\"name\"\n                                    label=\"Name\"\n                                    autoFocus\n                                    value={signupForm.name.value}\n                                    onChange={(event) =>\n                                        inputChangeHandler(\n                                            \"name\",\n                                            event.target.value\n                                        )\n                                    }\n                                    onBlur={() => inputBlurHandler(\"name\")}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                    value={signupForm.email.value}\n                                    onChange={(event) =>\n                                        inputChangeHandler(\n                                            \"email\",\n                                            event.target.value\n                                        )\n                                    }\n                                    onBlur={() => inputBlurHandler(\"email\")}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"new-password\"\n                                    value={signupForm.password.value}\n                                    onChange={(event) =>\n                                        inputChangeHandler(\n                                            \"password\",\n                                            event.target.value\n                                        )\n                                    }\n                                    onBlur={() => inputBlurHandler(\"password\")}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            disabled={!signupForm.formIsValid}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link\n                                    component={RouterLink}\n                                    to=\"/signin\"\n                                    variant=\"body2\"\n                                >\n                                    Already have an account? Sign in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}\n","export const required = (value: string) => value.trim() !== \"\";\n\nexport const length =\n    (config: { min?: number; max?: number }) => (value: string) => {\n        let isValid = true;\n        if (config.min) {\n            isValid = isValid && value.trim().length >= config.min;\n        }\n        if (config.max) {\n            isValid = isValid && value.trim().length <= config.max;\n        }\n        return isValid;\n    };\n\nexport const email = (value: string) =>\n    /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(\n        value\n    );\n\n// export const required = value => value.trim() !== '';\n\n// export const length = config => value => {\n//   let isValid = true;\n//   if (config.min) {\n//     isValid = isValid && value.trim().length >= config.min;\n//   }\n//   if (config.max) {\n//     isValid = isValid && value.trim().length <= config.max;\n//   }\n//   return isValid;\n// };\n\n// export const email = value =>\n//   /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(\n//     value\n//   );\n"],"names":["defaultTheme","createTheme","palette","mode","SignUp","_ref","onSignup","navigate","useNavigate","signupForm","setSignupForm","useState","email","value","valid","touched","validators","required","password","length","min","name","formIsValid","inputChangeHandler","input","isValid","validator","updatedForm","inputName","inputBlurHandler","prevState","_jsx","ThemeProvider","theme","children","_jsxs","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","onSubmit","event","preventDefault","mt","Grid","container","spacing","item","xs","TextField","autoComplete","fullWidth","id","label","autoFocus","onChange","target","onBlur","type","Button","mb","disabled","justifyContent","Link","RouterLink","to","trim","config","max","test"],"sourceRoot":""}