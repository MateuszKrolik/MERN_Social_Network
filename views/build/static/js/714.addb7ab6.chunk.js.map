{"version":3,"file":"static/js/714.addb7ab6.chunk.js","mappings":"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","sources":["../node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js","../node_modules/@mui/material/Grid/GridContext.js","../node_modules/@mui/material/Grid/gridClasses.js","../node_modules/@mui/material/Grid/Grid.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onChange\", \"maxRows\", \"minRows\", \"style\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_debounce as debounce, unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction getStyleValue(value) {\n  return parseInt(value, 10) || 0;\n}\nconst styles = {\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflowing;\n}\n\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\nconst TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, forwardedRef) {\n  const {\n      onChange,\n      maxRows,\n      minRows = 1,\n      style,\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    current: isControlled\n  } = React.useRef(value != null);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(forwardedRef, inputRef);\n  const shadowRef = React.useRef(null);\n  const calculateTextareaStyles = React.useCallback(() => {\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    const computedStyle = containerWindow.getComputedStyle(input);\n\n    // If input's width is shrunk and it's not visible, don't sync height.\n    if (computedStyle.width === '0px') {\n      return {\n        outerHeightStyle: 0,\n        overflowing: false\n      };\n    }\n    const inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    if (inputShallow.value.slice(-1) === '\\n') {\n      // Certain fonts which overflow the line height will cause the textarea\n      // to report a different scrollHeight depending on whether the last line\n      // is empty. Make it non-empty to avoid this issue.\n      inputShallow.value += ' ';\n    }\n    const boxSizing = computedStyle.boxSizing;\n    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);\n    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);\n\n    // The height of the inner content\n    const innerHeight = inputShallow.scrollHeight;\n\n    // Measure height of a textarea with a single row\n    inputShallow.value = 'x';\n    const singleRowHeight = inputShallow.scrollHeight;\n\n    // The height of the outer content\n    let outerHeight = innerHeight;\n    if (minRows) {\n      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);\n    }\n    if (maxRows) {\n      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);\n    }\n    outerHeight = Math.max(outerHeight, singleRowHeight);\n\n    // Take the box sizing into account for applying this value as a style.\n    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    const overflowing = Math.abs(outerHeight - innerHeight) <= 1;\n    return {\n      outerHeightStyle,\n      overflowing\n    };\n  }, [maxRows, minRows, props.placeholder]);\n  const syncHeight = React.useCallback(() => {\n    const textareaStyles = calculateTextareaStyles();\n    if (isEmpty(textareaStyles)) {\n      return;\n    }\n    const input = inputRef.current;\n    input.style.height = `${textareaStyles.outerHeightStyle}px`;\n    input.style.overflow = textareaStyles.overflowing ? 'hidden' : '';\n  }, [calculateTextareaStyles]);\n  useEnhancedEffect(() => {\n    const handleResize = () => {\n      syncHeight();\n    };\n    // Workaround a \"ResizeObserver loop completed with undelivered notifications\" error\n    // in test.\n    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38\n    // Also see https://github.com/mui/mui-x/issues/8733\n    let rAF;\n    const rAFHandleResize = () => {\n      cancelAnimationFrame(rAF);\n      rAF = requestAnimationFrame(() => {\n        handleResize();\n      });\n    };\n    const debounceHandleResize = debounce(handleResize);\n    const input = inputRef.current;\n    const containerWindow = ownerWindow(input);\n    containerWindow.addEventListener('resize', debounceHandleResize);\n    let resizeObserver;\n    if (typeof ResizeObserver !== 'undefined') {\n      resizeObserver = new ResizeObserver(process.env.NODE_ENV === 'test' ? rAFHandleResize : handleResize);\n      resizeObserver.observe(input);\n    }\n    return () => {\n      debounceHandleResize.clear();\n      cancelAnimationFrame(rAF);\n      containerWindow.removeEventListener('resize', debounceHandleResize);\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n      }\n    };\n  }, [calculateTextareaStyles, syncHeight]);\n  useEnhancedEffect(() => {\n    syncHeight();\n  });\n  const handleChange = event => {\n    if (!isControlled) {\n      syncHeight();\n    }\n    if (onChange) {\n      onChange(event);\n    }\n  };\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      value: value,\n      onChange: handleChange,\n      ref: handleRef\n      // Apply the rows prop to get a \"correct\" first SSR paint\n      ,\n      rows: minRows,\n      style: style\n    }, other)), /*#__PURE__*/_jsx(\"textarea\", {\n      \"aria-hidden\": true,\n      className: props.className,\n      readOnly: true,\n      ref: shadowRef,\n      tabIndex: -1,\n      style: _extends({}, styles.shadow, style, {\n        paddingTop: 0,\n        paddingBottom: 0\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Maximum number of rows to display.\n   */\n  maxRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Minimum number of rows to display.\n   * @default 1\n   */\n  minRows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * @ignore\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string])\n} : void 0;\nexport { TextareaAutosize };","'use client';\n\nimport * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst GridContext = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  GridContext.displayName = 'GridContext';\n}\nexport default GridContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getGridUtilityClass(slot) {\n  return generateUtilityClass('MuiGrid', slot);\n}\nconst SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];\nconst WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];\nconst GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',\n// spacings\n...SPACINGS.map(spacing => `spacing-xs-${spacing}`),\n// direction values\n...DIRECTIONS.map(direction => `direction-xs-${direction}`),\n// wrap values\n...WRAPS.map(wrap => `wrap-xs-${wrap}`),\n// grid sizes for all breakpoints\n...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);\nexport default gridClasses;","'use client';\n\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"rowSpacing\", \"spacing\", \"wrap\", \"zeroMinWidth\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n    if (!size) {\n      return globalStyles;\n    }\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      }\n      // Keep 7 significant numbers.\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      }\n\n      // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    }\n\n    // No need for a media query for the first size.\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n    return output;\n  });\n}\n\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      var _zeroValueBreakpointK2;\n      const themeSpacing = theme.spacing(propValue);\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n      if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {\n        return {};\n      }\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  }\n  // in case of object `spacing`\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n}\n\n// Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = [];\n\n    // in case of grid item\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  }\n  // in case of string/number `spacing`\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  }\n  // in case of object `spacing`\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = [];\n\n  // in case of grid item\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n  const {\n      className,\n      columns: columnsProp,\n      columnSpacing: columnSpacingProp,\n      component = 'div',\n      container = false,\n      direction = 'row',\n      item = false,\n      rowSpacing: rowSpacingProp,\n      spacing = 0,\n      wrap = 'wrap',\n      zeroMinWidth = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext);\n\n  // columns set with default breakpoint unit of 12\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n  const otherFiltered = _extends({}, other);\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing\n  }, breakpointsValues, {\n    breakpoints: breakpoints.keys\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, otherFiltered))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid);\n  // eslint-disable-next-line no-useless-concat\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\nexport default Grid;"],"names":["_excluded","getStyleValue","value","parseInt","styles","visibility","position","overflow","height","top","left","transform","TextareaAutosize","React","props","forwardedRef","onChange","maxRows","minRows","style","other","_objectWithoutPropertiesLoose","current","isControlled","inputRef","handleRef","useForkRef","shadowRef","calculateTextareaStyles","input","computedStyle","ownerWindow","getComputedStyle","width","outerHeightStyle","overflowing","inputShallow","placeholder","slice","boxSizing","padding","paddingBottom","paddingTop","border","borderBottomWidth","borderTopWidth","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","abs","syncHeight","textareaStyles","undefined","obj","Object","keys","length","concat","useEnhancedEffect","handleResize","rAF","debounceHandleResize","debounce","containerWindow","resizeObserver","addEventListener","ResizeObserver","observe","clear","cancelAnimationFrame","removeEventListener","disconnect","_jsxs","children","_jsx","_extends","event","ref","rows","className","readOnly","tabIndex","getGridUtilityClass","slot","generateUtilityClass","GRID_SIZES","generateUtilityClasses","map","spacing","direction","wrap","size","getOffset","val","parse","parseFloat","String","replace","extractZeroValueBreakpointKeys","_ref3","breakpoints","values","nonZeroKey","forEach","key","sortedBreakpointKeysByValue","sort","a","b","indexOf","GridRoot","styled","name","overridesResolver","ownerState","container","item","zeroMinWidth","spacingStyles","arguments","isNaN","breakpoint","push","resolveSpacingStyles","breakpointsStyles","root","_ref6","display","flexWrap","margin","minWidth","_ref2","theme","directionValues","resolveBreakpointValues","handleBreakpoints","propValue","output","flexDirection","gridClasses","maxWidth","_ref4","rowSpacing","rowSpacingValues","zeroValueBreakpointKeys","_zeroValueBreakpointK","themeSpacing","marginTop","includes","_ref5","columnSpacing","columnSpacingValues","_zeroValueBreakpointK2","marginLeft","paddingLeft","_ref","reduce","globalStyles","flexBasis","flexGrow","flexShrink","columnsBreakpointValues","columns","columnValue","round","more","fullWidth","assign","up","useUtilityClasses","classes","spacingClasses","resolveSpacingClasses","breakpointsClasses","slots","composeClasses","Grid","inProps","themeProps","useThemeProps","useTheme","extendSxProp","columnsProp","columnSpacingProp","component","rowSpacingProp","columnsContext","GridContext","breakpointsValues","otherFiltered","Provider","clsx","as"],"sourceRoot":""}