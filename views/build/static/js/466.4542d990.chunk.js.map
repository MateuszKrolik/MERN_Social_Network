{"version":3,"file":"static/js/466.4542d990.chunk.js","mappings":"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","sources":["components/Feed/Post.tsx","components/Button.tsx","components/Form/Input/Input.tsx","components/Form/Input/FilePicker.tsx","util/image.ts","components/Feed/FeedEdit.jsx","pages/Feed/Feed.jsx","util/validators.ts"],"sourcesContent":["import {\n    Card,\n    CardContent,\n    CardActions,\n    Typography,\n    Button,\n} from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\n\ninterface PostProps {\n    author: string;\n    date: string;\n    title: string;\n    id: string;\n    onStartEdit: () => void;\n    onDelete: () => void;\n}\n\nconst Post = ({\n    author,\n    date,\n    title,\n    id,\n    onStartEdit,\n    onDelete,\n}: PostProps) => (\n    <Card\n        sx={{\n            m: 2,\n            width: \"70%\",\n            mx: \"auto\",\n        }}\n    >\n        <CardContent>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n                Posted by {author} on {date}\n            </Typography>\n            <Typography variant=\"h5\" color=\"text.primary\">\n                {title}\n            </Typography>\n        </CardContent>\n        <CardActions sx={{ justifyContent: \"flex-end\" }}>\n            <Link to={id}>\n                <Button variant=\"text\">View</Button>\n            </Link>\n            <Button variant=\"text\" onClick={onStartEdit}>\n                Edit\n            </Button>\n            <Button variant=\"text\" color=\"error\" onClick={onDelete}>\n                Delete\n            </Button>\n        </CardActions>\n    </Card>\n);\n\nexport default Post;\n","import { Button } from \"@mui/material\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { ReactNode } from \"react\";\n\ninterface MyButtonProps {\n    link?: string;\n    onClick?: () => void;\n    disabled?: boolean;\n    loading?: boolean;\n    type?: \"button\" | \"submit\" | \"reset\";\n    children: ReactNode;\n}\n\nconst MyButton = ({ link, onClick, disabled, loading, type, children }: MyButtonProps) => {\n    return !link ? (\n        <Button\n            onClick={onClick}\n            disabled={disabled || loading}\n            type={type}\n            variant=\"contained\"\n            style={{ backgroundColor: \"#fab83f\" }}\n        >\n            {loading ? \"Loading...\" : children}\n        </Button>\n    ) : (\n        <Button component={RouterLink} to={link}>\n            {children}\n        </Button>\n    );\n};\n\nexport default MyButton;\n","import { TextareaAutosize, Box, useTheme } from \"@mui/material\";\n\ninterface InputProps {\n    control: \"input\" | \"textarea\";\n    id: string;\n    label: string;\n    required: boolean;\n    value: string;\n    placeholder: string;\n    valid: boolean;\n    touched: boolean;\n    onChange: (id: string, value: string, files?: FileList) => void;\n    onBlur: () => void;\n    minRows?: number;\n    rows?: number;\n}\n\nconst Input = ({\n    control,\n    id,\n    label,\n    required,\n    value,\n    placeholder,\n    // valid,\n    // touched,\n    onChange,\n    onBlur,\n    minRows,\n}: // rows,\nInputProps) => {\n    const theme = useTheme();\n\n    if (control === \"input\") {\n        return (\n            <Box margin={1}>\n                <label htmlFor={id}>{label}</label>\n                <TextareaAutosize\n                    id={id}\n                    required={required}\n                    value={value}\n                    placeholder={placeholder}\n                    onChange={(e) => onChange(id, e.target.value)}\n                    onBlur={onBlur}\n                    style={{\n                        display: \"block\",\n                        font: \"inherit\",\n                        width: \"100%\",\n                        color: theme.palette.text.primary,\n                        backgroundColor:\n                            theme.palette.action.disabledBackground,\n                    }}\n                />\n            </Box>\n        );\n    }\n\n    if (control === \"textarea\") {\n        return (\n            <Box margin={1}>\n                <label htmlFor={id}>{label}</label>\n                <TextareaAutosize\n                    id={id}\n                    minRows={id === \"content\" ? 5 : minRows}\n                    // rows={rows}\n                    required={required}\n                    value={value}\n                    placeholder={placeholder}\n                    // error={!valid && touched}\n                    onChange={(e) => onChange(id, e.target.value)}\n                    onBlur={onBlur}\n                    style={{\n                        display: \"block\",\n                        font: \"inherit\",\n                        width: \"100%\",\n                        color: theme.palette.text.primary,\n                        backgroundColor:\n                            theme.palette.action.disabledBackground,\n                    }}\n                />\n            </Box>\n        );\n    }\n\n    return null;\n};\n\nexport default Input;\n","import { Box, useTheme } from \"@mui/material\";\nimport { useState } from \"react\";\n\ninterface FilePickerProps {\n    id: string;\n    valid: boolean;\n    touched: boolean;\n    onChange: (id: string, value: string, files?: FileList) => void;\n    onBlur: () => void;\n}\n\nconst FilePicker = ({\n    id,\n    valid,\n    touched,\n    onChange,\n    onBlur,\n}: FilePickerProps) => {\n    const theme = useTheme();\n    const [fileName, setFileName] = useState(\"\");\n\n    const fileChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) {\n            onChange(id, e.target.value, e.target.files);\n            setFileName(\n                e.target.files.length > 0 ? e.target.files[0].name : \"\"\n            );\n        }\n    };\n\n    return (\n        <Box margin={1}>\n            <input\n                type=\"file\"\n                id={id}\n                // error={!valid && touched}\n                onChange={fileChangeHandler}\n                onBlur={onBlur}\n                style={{ display: \"none\" }}\n            />\n            <label\n                htmlFor={id}\n                style={{\n                    display: \"block\",\n                    width: \"100%\",\n                    border: \"1px solid #808080\",\n                    color: theme.palette.text.primary,\n                    backgroundColor: theme.palette.action.disabledBackground,\n                }}\n            >\n                {fileName ? fileName : \"Choose file\"}\n            </label>\n        </Box>\n    );\n};\n\nexport default FilePicker;\n","export const generateBase64FromImage = (imageFile: Blob) => {\n    const reader = new FileReader();\n    const promise = new Promise((resolve, reject) => {\n        reader.onload = e => resolve((e.target as FileReader).result);\n        reader.onerror = reject;\n    });\n\n    reader.readAsDataURL(imageFile);\n    return promise;\n};\n","import React, { useState, useEffect, useCallback, Fragment } from 'react';\n\nimport Modal from '../Modal';\nimport Input from '../Form/Input/Input';\nimport FilePicker from '../Form/Input/FilePicker';\nimport { Backdrop } from '@mui/material';\nimport { required, length } from '../../util/validators';\nimport { generateBase64FromImage } from '../../util/image';\n\nconst POST_FORM = {\n  title: {\n    value: '',\n    valid: false,\n    touched: false,\n    validators: [required, length({ min: 5 })],\n  },\n  image: {\n    value: '',\n    valid: false,\n    touched: false,\n    validators: [required],\n  },\n  content: {\n    value: '',\n    valid: false,\n    touched: false,\n    validators: [required, length({ min: 5 })],\n  },\n};\n\nconst FeedEdit = (props) => {\n  const [postForm, setPostForm] = useState(POST_FORM);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [imagePreview, setImagePreview] = useState(null);\n\n  useEffect(() => {\n    if (\n      props.editing &&\n      props.selectedPost &&\n      (postForm.title.value !== props.selectedPost.title ||\n        postForm.image.value !== props.selectedPost.imagePath ||\n        postForm.content.value !== props.selectedPost.content)\n    ) {\n      const updatedPostForm = {\n        ...postForm,\n        title: {\n          ...postForm.title,\n          value: props.selectedPost.title,\n          valid: true,\n        },\n        image: {\n          ...postForm.image,\n          value: props.selectedPost.imagePath,\n          valid: true,\n        },\n        content: {\n          ...postForm.content,\n          value: props.selectedPost.content,\n          valid: true,\n        },\n      };\n      setPostForm(updatedPostForm);\n      setFormIsValid(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.editing, props.selectedPost]);\n\n  const postInputChangeHandler = useCallback(\n    (input, value, files) => {\n      if (files) {\n        generateBase64FromImage(files[0])\n          .then((b64) => {\n            setImagePreview(b64);\n          })\n          .catch((e) => {\n            setImagePreview(null);\n          });\n      }\n      let isValid = true;\n      for (const validator of postForm[input].validators) {\n        isValid = isValid && validator(value);\n      }\n      const updatedForm = {\n        ...postForm,\n        [input]: {\n          ...postForm[input],\n          valid: isValid,\n          value: files ? files[0] : value,\n        },\n      };\n      let formIsValid = true;\n      for (const inputName in updatedForm) {\n        formIsValid = formIsValid && updatedForm[inputName].valid;\n      }\n      setPostForm(updatedForm);\n      setFormIsValid(formIsValid);\n    },\n    [postForm]\n  );\n\n  const inputBlurHandler = useCallback((input) => {\n    setPostForm((prevState) => {\n      return {\n        ...prevState,\n        [input]: {\n          ...prevState[input],\n          touched: true,\n        },\n      };\n    });\n  }, []);\n\n  const cancelPostChangeHandler = useCallback(() => {\n    setPostForm(POST_FORM);\n    setFormIsValid(false);\n    props.onCancelEdit();\n  }, [props]);\n\n  const acceptPostChangeHandler = useCallback(() => {\n    const post = {\n      title: postForm.title.value,\n      image: postForm.image.value,\n      content: postForm.content.value,\n    };\n    props.onFinishEdit(post);\n    setPostForm(POST_FORM);\n    setFormIsValid(false);\n    setImagePreview(null);\n  }, [postForm, props]);\n\n  return props.editing ? (\n    <Fragment>\n      <Backdrop open={props.editing} onClick={cancelPostChangeHandler} />\n      <Modal\n        open={props.editing}\n        title=\"New Post\"\n        acceptEnabled={formIsValid}\n        onCancelModal={cancelPostChangeHandler}\n        onAcceptModal={acceptPostChangeHandler}\n        isLoading={props.loading}\n      >\n        <form>\n          <Input\n            id=\"title\"\n            label=\"Title\"\n            control=\"input\"\n            onChange={postInputChangeHandler}\n            onBlur={() => inputBlurHandler('title')}\n            valid={postForm['title'].valid}\n            touched={postForm['title'].touched}\n            value={postForm['title'].value}\n          />\n          <FilePicker\n            id=\"image\"\n            label=\"Image\"\n            control=\"input\"\n            onChange={postInputChangeHandler}\n            onBlur={() => inputBlurHandler('image')}\n            valid={postForm['image'].valid}\n            touched={postForm['image'].touched}\n          />\n          <div>\n            {!imagePreview && (\n              <p style={{ textAlign: 'center' }}>Please choose an image.</p>\n            )}\n            {imagePreview && (\n              <img\n                src={imagePreview}\n                alt={postForm['title'].value}\n                style={{ width: '200px' }}\n              />\n            )}\n          </div>\n          <Input\n            id=\"content\"\n            label=\"Content\"\n            control=\"textarea\"\n            onChange={postInputChangeHandler}\n            onBlur={() => inputBlurHandler('content')}\n            valid={postForm['content'].valid}\n            touched={postForm['content'].touched}\n            value={postForm['content'].value}\n          />\n        </form>\n      </Modal>\n    </Fragment>\n  ) : null;\n};\n\nexport default FeedEdit;","import React, {\n    useState,\n    useEffect,\n    // useRef,\n    useCallback,\n} from \"react\";\n// import openSocket from 'socket.io-client';\n\nimport {\n    Box,\n    Grid,\n    Typography,\n    CircularProgress,\n    Pagination,\n} from \"@mui/material\";\n\nimport Post from \"../../components/Feed/Post\";\nimport Button from \"../../components/Button\";\nimport FeedEdit from \"../../components/Feed/FeedEdit\";\nimport Input from \"../../components/Form/Input/Input\";\nimport ErrorHandler from \"../../components/ErrorHandler\";\n\nimport axios from \"axios\";\n\nconst Feed = (props) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [posts, setPosts] = useState([]);\n    const [totalPosts, setTotalPosts] = useState(0);\n    const [editPost, setEditPost] = useState(null);\n    const [status, setStatus] = useState(\"\");\n    const [postPage, setPostPage] = useState(1);\n    const [postsLoading, setPostsLoading] = useState(true);\n    const [editLoading, setEditLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    //   const socket = useRef();\n\n    const addPost = useCallback((post) => {\n        setPosts((prevState) => {\n            const updatedPosts = [...prevState];\n            if (\n                !updatedPosts.some(\n                    (existingPost) => existingPost._id === post._id\n                )\n            ) {\n                updatedPosts.unshift(post);\n                if (updatedPosts.length > 2) {\n                    updatedPosts.pop();\n                }\n            }\n            return updatedPosts;\n        });\n\n        setTotalPosts((prevTotalPosts) => prevTotalPosts + 1);\n    }, []);\n\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + props.token;\n\n    useEffect(() => {\n        const fetchStatus = async () => {\n            try {\n                const res = await axios.get(\n                    \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/auth/status\"\n                );\n                setStatus(res.data.status);\n            } catch (error) {\n                catchError(error);\n            }\n        };\n\n        const loadPosts = async () => {\n            try {\n                const res = await axios.get(\n                    \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/feed/posts?page=\" +\n                        postPage\n                );\n                setPosts(res.data.posts);\n                setTotalPosts(res.data.totalItems);\n                setPostsLoading(false);\n            } catch (error) {\n                catchError(error);\n            }\n        };\n\n        fetchStatus();\n        loadPosts();\n        // socket.current = openSocket(\n        //   'http://localhost:8080'\n        // );\n        // socket.current.on('posts', (data) => {\n        //   if (data.action === 'create') {\n        //     addPost(data.post);\n        //   } else if (data.action === 'update') {\n        //     updatePost(data.post);\n        //   } else if (data.action === 'delete') {\n        //     loadPosts();\n        //   }\n        // });\n    }, [props.token, postPage, addPost]);\n\n    const updatePost = (post) => {\n        setPosts((prevState) => {\n            const updatedPosts = [...prevState];\n            const updatedPostIndex = updatedPosts.findIndex(\n                (p) => p._id === post._id\n            );\n            if (updatedPostIndex > -1) {\n                updatedPosts[updatedPostIndex] = post;\n            }\n            return updatedPosts;\n        });\n    };\n\n    const loadPosts = async (direction) => {\n        if (direction) {\n            setPostsLoading(true);\n            setPosts([]);\n        }\n        let page = postPage;\n        if (direction === \"next\") {\n            page++;\n            setPostPage(page);\n        }\n        if (direction === \"previous\") {\n            page--;\n            setPostPage(page);\n        }\n        try {\n            const res = await axios.get(\n                \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/feed/posts?page=\" +\n                    page,\n                {\n                    validateStatus: function (status) {\n                        return true; // I control the error!\n                    },\n                }\n            );\n\n            if (res.status !== 200) {\n                throw new Error(\"Failed to fetch posts.\");\n            }\n\n            setPosts(\n                res.data.posts.map((post) => {\n                    return {\n                        ...post,\n                        imagePath: post.imageUrl,\n                    };\n                })\n            );\n            setTotalPosts(res.data.totalItems);\n            setPostsLoading(false);\n        } catch (err) {\n            catchError(err);\n        }\n    };\n\n    const statusUpdateHandler = (event) => {\n        event.preventDefault();\n        axios\n            .patch(\n                \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/auth/status\",\n                {\n                    status: status,\n                }\n            )\n            .then((res) => {\n                console.log(res.data);\n            })\n            .catch(catchError);\n    };\n\n    const newPostHandler = () => {\n        setIsEditing(true);\n    };\n\n    const startEditPostHandler = (postId) => {\n        const loadedPost = { ...posts.find((p) => p._id === postId) };\n        setIsEditing(true);\n        setEditPost(loadedPost);\n    };\n\n    const cancelEditHandler = () => {\n        setIsEditing(false);\n        setEditPost(null);\n    };\n\n    const finishEditHandler = async (postData) => {\n        setEditLoading(true);\n        const formData = new FormData();\n        formData.append(\"title\", postData.title);\n        formData.append(\"content\", postData.content);\n        formData.append(\"image\", postData.image);\n        let url = \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/feed/post\";\n        let method = \"POST\";\n        if (editPost) {\n            url =\n                \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/feed/post/\" +\n                editPost._id; //for editing\n            method = \"PUT\";\n        }\n\n        try {\n            const res = await axios({\n                url: url,\n                method: method,\n                data: formData,\n                validateStatus: function (status) {\n                    return true; // I control the error!\n                },\n            });\n\n            if (res.status !== 200 && res.status !== 201) {\n                throw new Error(\"Creating or editing a post failed!\");\n            }\n\n            console.log(res.data);\n            setIsEditing(false);\n            setEditPost(null);\n            setEditLoading(false);\n        } catch (err) {\n            setIsEditing(false);\n            setEditPost(null);\n            setEditLoading(false);\n            setError(err);\n        }\n    };\n\n    const statusInputChangeHandler = (input, value) => {\n        setStatus(value);\n    };\n\n    const deletePostHandler = async (postId) => {\n        setPostsLoading(true);\n        try {\n            const res = await axios.delete(\n                \"https://mkrolik-social-api-de4b456-s7k2op5jka-ew.a.run.app/feed/post/\" +\n                    postId\n            );\n            console.log(res.data);\n            loadPosts();\n        } catch (err) {\n            console.log(err);\n            setPostsLoading(false);\n        }\n    };\n\n    const errorHandler = () => {\n        setError(null);\n    };\n\n    const catchError = (error) => {\n        setError(error);\n    };\n\n    return (\n        <>\n            <ErrorHandler error={error} onHandle={errorHandler} />\n            <FeedEdit\n                editing={isEditing}\n                selectedPost={editPost}\n                loading={editLoading}\n                onCancelEdit={cancelEditHandler}\n                onFinishEdit={finishEditHandler}\n            />\n            <Box\n                sx={{\n                    width: \"90%\",\n                    margin: \"1rem auto\",\n                    position: \"sticky\",\n                    top: 0,\n                    zIndex: 1,\n                }}\n            >\n                <form onSubmit={statusUpdateHandler}>\n                    <Grid\n                        container\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        spacing={1}\n                    >\n                        <Grid item>\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Your status\"\n                                control=\"input\"\n                                onChange={statusInputChangeHandler}\n                                value={status}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Button mode=\"flat\" type=\"submit\">\n                                Update\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </form>\n            </Box>\n            <Box textAlign=\"center\">\n                <Button mode=\"raised\" design=\"accent\" onClick={newPostHandler}>\n                    New Post\n                </Button>\n            </Box>\n            <section>\n                {postsLoading && (\n                    <Box textAlign=\"center\" marginTop=\"2rem\">\n                        <CircularProgress />\n                    </Box>\n                )}\n                {posts.length <= 0 && !postsLoading ? (\n                    <Typography align=\"center\">No posts found.</Typography>\n                ) : null}\n                {!postsLoading && (\n                    <>\n                        {posts.map((post) => (\n                            <Post\n                                key={post._id}\n                                id={post._id}\n                                author={post.creator.name}\n                                date={new Date(\n                                    post.createdAt\n                                ).toLocaleDateString(\"en-US\")}\n                                title={post.title}\n                                image={post.imageUrl}\n                                content={post.content}\n                                onStartEdit={() =>\n                                    startEditPostHandler(post._id)\n                                }\n                                onDelete={() => deletePostHandler(post._id)}\n                            />\n                        ))}\n                        <Box display=\"flex\" justifyContent=\"center\">\n                            <Pagination\n                                count={Math.ceil(totalPosts / 2)}\n                                page={postPage}\n                                onChange={(event, page) => {\n                                    if (page < postPage) {\n                                        loadPosts(\"previous\");\n                                    } else if (page > postPage) {\n                                        loadPosts(\"next\");\n                                    }\n                                }}\n                            />\n                        </Box>\n                    </>\n                )}\n            </section>\n        </>\n    );\n};\n\nexport default Feed;\n","export const required = (value: string) => value.trim() !== \"\";\n\nexport const length =\n    (config: { min?: number; max?: number }) => (value: string) => {\n        let isValid = true;\n        if (config.min) {\n            isValid = isValid && value.trim().length >= config.min;\n        }\n        if (config.max) {\n            isValid = isValid && value.trim().length <= config.max;\n        }\n        return isValid;\n    };\n\nexport const email = (value: string) =>\n    /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(\n        value\n    );\n\n"],"names":["_ref","author","date","title","id","onStartEdit","onDelete","_jsxs","Card","sx","m","width","mx","children","CardContent","Typography","variant","color","_jsx","CardActions","justifyContent","Link","to","Button","onClick","link","disabled","loading","type","component","RouterLink","style","backgroundColor","control","label","required","value","placeholder","onChange","onBlur","minRows","theme","useTheme","Box","margin","htmlFor","TextareaAutosize","e","target","display","font","palette","text","primary","action","disabledBackground","valid","touched","fileName","setFileName","useState","files","length","name","border","POST_FORM","validators","min","image","content","props","postForm","setPostForm","formIsValid","setFormIsValid","imagePreview","setImagePreview","useEffect","editing","selectedPost","imagePath","updatedPostForm","postInputChangeHandler","useCallback","input","imageFile","reader","FileReader","promise","Promise","resolve","reject","onload","result","onerror","readAsDataURL","generateBase64FromImage","then","b64","catch","isValid","validator","updatedForm","inputName","inputBlurHandler","prevState","cancelPostChangeHandler","onCancelEdit","acceptPostChangeHandler","post","onFinishEdit","Fragment","Backdrop","open","Modal","acceptEnabled","onCancelModal","onAcceptModal","isLoading","Input","FilePicker","textAlign","src","alt","isEditing","setIsEditing","posts","setPosts","totalPosts","setTotalPosts","editPost","setEditPost","status","setStatus","postPage","setPostPage","postsLoading","setPostsLoading","editLoading","setEditLoading","error","setError","addPost","updatedPosts","some","existingPost","_id","unshift","pop","prevTotalPosts","axios","defaults","headers","common","token","async","res","get","data","catchError","fetchStatus","totalItems","loadPosts","direction","page","validateStatus","Error","map","imageUrl","err","_Fragment","ErrorHandler","onHandle","errorHandler","FeedEdit","cancelEditHandler","formData","FormData","append","postData","url","method","console","log","position","top","zIndex","onSubmit","event","preventDefault","patch","Grid","container","alignItems","spacing","item","statusInputChangeHandler","mode","design","newPostHandler","marginTop","CircularProgress","align","Post","creator","Date","createdAt","toLocaleDateString","postId","loadedPost","find","p","startEditPostHandler","delete","deletePostHandler","Pagination","count","Math","ceil","trim","config","max","email","test"],"sourceRoot":""}