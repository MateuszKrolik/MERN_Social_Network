{"version":3,"file":"static/js/571.7be48019.chunk.js","mappings":"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","sources":["pages/Auth/Login.tsx","util/validators.ts"],"sourcesContent":["import { useState, SyntheticEvent } from \"react\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport { required, length, email } from \"../../util/validators\";\nimport {\n    Avatar,\n    Button,\n    CssBaseline,\n    TextField,\n    Link,\n    Grid,\n    Box,\n    Typography,\n    Container,\n    createTheme,\n    ThemeProvider,\n} from \"@mui/material\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\n\nconst defaultTheme = createTheme({\n    palette: {\n        mode: \"dark\",\n    },\n});\n\ninterface LoginForm {\n    email: FormField;\n    password: FormField;\n}\n\ninterface FormField {\n    value: string;\n    valid: boolean;\n    touched: boolean;\n    validators: ((value: string) => boolean)[];\n}\n\ninterface LoginProps {\n    onLogin: (\n        event: SyntheticEvent,\n        data: {\n            email: string;\n            password: string;\n        }\n    ) => void;\n}\n\nexport default function SignIn({ onLogin }: LoginProps) {\n    const [loginForm, setLoginForm] = useState<LoginForm>({\n        email: {\n            value: \"\",\n            valid: false,\n            touched: false,\n            validators: [required, email],\n        },\n        password: {\n            value: \"\",\n            valid: false,\n            touched: false,\n            validators: [required, length({ min: 5 })],\n        },\n    });\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    const inputChangeHandler = (input: keyof LoginForm, value: string) => {\n        let isValid = true;\n        for (const validator of loginForm[input].validators) {\n            isValid = isValid && validator(value);\n        }\n        const updatedForm = {\n            ...loginForm,\n            [input]: {\n                ...loginForm[input],\n                valid: isValid,\n                value: value,\n            },\n        };\n        let formIsValid = true;\n        for (const inputName in updatedForm) {\n            formIsValid =\n                formIsValid && updatedForm[inputName as keyof LoginForm].valid;\n        }\n        setLoginForm(updatedForm);\n        setFormIsValid(formIsValid);\n    };\n\n    const inputBlurHandler = (input: keyof LoginForm) => {\n        setLoginForm({\n            ...loginForm,\n            [input]: {\n                ...loginForm[input],\n                touched: true,\n            },\n        });\n    };\n\n    const handleSubmit = (event: SyntheticEvent) => {\n        event.preventDefault();\n        onLogin(event, {\n            email: loginForm.email.value,\n            password: loginForm.password.value,\n        });\n    };\n\n    return (\n        <ThemeProvider theme={defaultTheme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <Box\n                        component=\"form\"\n                        onSubmit={handleSubmit}\n                        noValidate\n                        sx={{ mt: 1 }}\n                    >\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                            value={loginForm.email.value}\n                            onChange={(event) =>\n                                inputChangeHandler(\"email\", event.target.value)\n                            }\n                            onBlur={() => inputBlurHandler(\"email\")}\n                            error={\n                                !loginForm.email.valid &&\n                                loginForm.email.touched\n                            }\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            value={loginForm.password.value}\n                            onChange={(event) =>\n                                inputChangeHandler(\n                                    \"password\",\n                                    event.target.value\n                                )\n                            }\n                            onBlur={() => inputBlurHandler(\"password\")}\n                            error={\n                                !loginForm.password.valid &&\n                                loginForm.password.touched\n                            }\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                            disabled={!formIsValid}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link\n                                    component={RouterLink}\n                                    to=\"/signup\"\n                                    variant=\"body2\"\n                                >\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}\n","export const required = (value: string) => value.trim() !== \"\";\n\nexport const length =\n    (config: { min?: number; max?: number }) => (value: string) => {\n        let isValid = true;\n        if (config.min) {\n            isValid = isValid && value.trim().length >= config.min;\n        }\n        if (config.max) {\n            isValid = isValid && value.trim().length <= config.max;\n        }\n        return isValid;\n    };\n\nexport const email = (value: string) =>\n    /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(\n        value\n    );\n\n"],"names":["defaultTheme","createTheme","palette","mode","SignIn","_ref","onLogin","loginForm","setLoginForm","useState","email","value","valid","touched","validators","required","password","length","min","formIsValid","setFormIsValid","inputChangeHandler","input","isValid","validator","updatedForm","inputName","inputBlurHandler","_jsx","ThemeProvider","theme","children","_jsxs","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","onSubmit","event","preventDefault","noValidate","mt","TextField","margin","fullWidth","id","label","name","autoComplete","autoFocus","onChange","target","onBlur","error","type","Button","mb","disabled","Grid","container","item","Link","RouterLink","to","trim","config","max","test"],"sourceRoot":""}